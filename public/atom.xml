<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Pills]]></title>
  <link href="http://codepills.net/atom.xml" rel="self"/>
  <link href="http://codepills.net/"/>
  <updated>2013-01-01T16:59:48+01:00</updated>
  <id>http://codepills.net/</id>
  <author>
    <name><![CDATA[Gabriele Petronella]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Obj-C: infer types like a man, man]]></title>
    <link href="http://codepills.net/blog/2013/01/01/obj-c-infer-types-like-a-man-man/"/>
    <updated>2013-01-01T15:45:00+01:00</updated>
    <id>http://codepills.net/blog/2013/01/01/obj-c-infer-types-like-a-man-man</id>
    <content type="html"><![CDATA[<h1>The Objective-C type system, in brief</h1>

<p>From a type system point of view <strong>Objective-C</strong> can be seen as hybrid language: it both allows dynamic typing, therefore achieving a great flexibility, and static typing, turning the compiler in a precious ally.</p>

<p>When coding you can explicitly declare the types of all your variables or decide to use the keywork <code>id</code>, which - in short - is a sort of a hint to the compiler telling him: &#8221;<em>Look, I know what I&#8217;m doing. Just trust me and everything will work out just fine.</em>&#8221;.</p>

<p>Sometimes using <code>id</code> comes in very handy, for instance <code>id</code> is the type of any object hold by a generic container (as <code>NSArray</code>) eliminating altogether the need for templates or generics (like you see in C++ or Java).</p>

<!-- more -->


<h1><code>id</code> in practice</h1>

<p>A very typical usage of the <code>id</code> keyword is with constructors. Why can&#8217;t the type be explicitly specified in such a case? Let&#8217;s make an example: we have a class <code>Person</code> and its subclass <code>Programmer</code>. What if we specify the type for their constructors?</p>

<figure class='code'><figcaption><span>Person.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* initialize stuff */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Programmer.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">Programmer</span> <span class="o">*</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* special skills for programmers */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span> <span class="c1">// what&#39;s the return type of self?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a conceptual problem here. We initialized the <code>self</code> instance of <code>Programmer</code> with the <code>Person</code> constructur (by calling <code>[super init]</code>), so now it&#8217;s type is <code>Person</code>.
Too bad that we our method has a return type of <code>Programmer</code>, therefore we cannot definitely return <code>self</code>, being of the wrong type.</p>

<p>Using <code>id</code> as return type allows subclasses to use their parents constructurs, a widly use technique for neatly solving the issue.</p>

<h1>The compiler is smart&#8230;</h1>

<p>Being that such a strong convention the <strong>clang</strong> compiler is already smart enough to infer the return type of many methods, by making use of another equally strong convention of the language: every instance method starting with <code>init</code>, <code>copy</code>, <code>retain</code> or <code>self</code> and every class method starting with <code>alloc</code> or <code>new</code> <strong>is known to be a method returning an instance of the receiver class</strong>.</p>

<p>So as an example the compiler knows that the following call will produce a <code>Person</code> instance, even if the return type of <code>init</code> is <code>id</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose then that <code>Programmer</code> has defined a method called <code>codeLikeAMan</code>. If we try something like follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">codeLikeAMan</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>the compiler will yell at us claiming that there is no visible interface for <code>Programmer</code> that declares the selector <code>codeLikeAMan</code>.</p>

<h1>&#8230;but not as smart as you may think!</h1>

<p>That&#8217;s great but what if we want to customize our constructors a little, for instance providing our own factory method? We would probably end up writing something like:</p>

<figure class='code'><figcaption><span>Person.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">person</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice, what what about type inference? Let&#8217;s try</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">Person</span> <span class="n">person</span><span class="p">]</span> <span class="n">codeLikeAMan</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bad news! The compiler doesn&#8217;t scream anymore: it&#8217;s not able to infer the type of <code>[Person person]</code> since it does not follow any known naming convention and that&#8217;s really bad since we all know that now any person can code like a man!</p>

<p>Result: compile and crash at runtime. Not cool at all.</p>

<p>It seems that we just need a way to let the compiler know that our method is returning an instance of the receiver class, being actually a factory method.</p>

<h1>Smart again, with a little help</h1>

<p>It turns out that our friend clang has a <a href="http://clang.llvm.org/docs/LanguageExtensions.html#objc_instancetype">language extension</a> which defines a special contextual keyword <code>instancetype</code> that can be used as a return type of an Objective-C method.</p>

<p>The keyword will tell the compiler to infer the return type, by looking at the method implementation. If we are returning something whose type can be inferred by the compiler, that type will become our new return type. <code>id</code> is used otherwise.</p>

<p>Let&#8217;s try with our previous example</p>

<figure class='code'><figcaption><span>Person.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">person</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler infers that the type <code>[[Person alloc] init]</code> is <code>Person</code>, according to the standard naming rule we discussed above, but now it will go further and it will change the return type of our method to <code>Person</code>. Therefore when we try again to do something as before:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">Person</span> <span class="n">person</span><span class="p">]</span> <span class="n">codeLikeAMan</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>the compiler will complain again, since now it knows the type of <code>[Person person]</code> to be <code>Person</code> and it can finally state without any doubt that a random person is not definitely able to code like a man!</p>

<p>It&#8217;s all for today,
stay tuned for more pills and happy 2013!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell data declaration constraints, the right way]]></title>
    <link href="http://codepills.net/blog/2012/12/17/haskell-data-constraints/"/>
    <updated>2012-12-17T14:21:00+01:00</updated>
    <id>http://codepills.net/blog/2012/12/17/haskell-data-constraints</id>
    <content type="html"><![CDATA[<p>Recently I&#8217;ve been using the Haskell language to implement the solutions to the <a href="https://class.coursera.org/algo2-2012-001/class/index">Coursera&#8217;s Algorithms 2</a> online course.</p>

<p>The idea of using Haskell came talking with <a href="http://blog.mariosangiorgio.com/">Mario</a> who was already using it for the very same purpose.</p>

<p>In such context Mario started developing a purely functional Union-Find data structure an he eventually run into an <a href="http://blog.mariosangiorgio.com/2012/12/17/let-the-type-inferencer-work-for-you/">interesting problem</a> concerning algebraic data types that inspired this post.</p>

<!-- more -->


<p>In order to define a parametric data type in Haskell you usually write something like follows. (I&#8217;ll take as example the very same data structure mentioned above.)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="ow">=</span>
</span><span class='line'>  <span class="kt">RootElement</span> <span class="n">valueType</span> <span class="o">|</span>
</span><span class='line'>  <span class="kt">ElementWithParent</span> <span class="n">valueType</span> <span class="p">(</span><span class="kt">UnionFindElement</span> <span class="n">valueType</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything looks fine and we try to use the new data type declaring a new function and its signature</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">holds</span> <span class="ow">::</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">holds</span> <span class="p">(</span><span class="kt">RootElement</span> <span class="n">v</span><span class="p">)</span> <span class="n">value</span> <span class="ow">=</span> <span class="n">v</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'><span class="nf">holds</span> <span class="p">(</span><span class="kt">ElementWithParent</span> <span class="n">v</span> <span class="n">root</span><span class="p">)</span> <span class="n">value</span> <span class="ow">=</span> <span class="n">v</span> <span class="o">==</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we are doing here is to perform an equality check on an argument whose type is a generic <code>valueType</code>. It seems reasonable but the compiler is not very happy about that: in fact we never promised that <code>valueType</code> will be an instance of the class <code>Eq</code> therefore it cannot determine whether the <code>==</code> operation can be performed or not.</p>

<p>The obvious fix here seems to put a constraint on the data constructor, meaning something: &#8221;<em>look the parameter can be any type, but I guarantee that such type is an instance of Eq</em>&#8221;.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">valueType</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="ow">=</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect right? Well, unfortunately it doesn&#8217;t work as expected (I won&#8217;t go through the details here) and this fact is so well known that such construct has been deprecated and it will be removed soon, as stated in the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html">official documentation</a>.</p>

<blockquote><p>This is widely considered a misfeature, and is going to be removed from the language.</p></blockquote>


<p>Damn! This means that we need to manually specify for every signature that our <code>valueType</code> is an instance of <code>Eq</code>, doing something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">holds</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">valueType</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<p>Really annoying indeed&#8230;</p>

<p>Can we do better? Fortunately we can! It turns out that in Haskell is possible to put constraints on the data type constructors using something called <strong>Generalized Algebraic Data Types</strong> (GADTs). According to the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/data-type-extensions.html#gadt">doc</a>:</p>

<blockquote><p>Generalised Algebraic Data Types generalise ordinary algebraic data types by allowing constructors to have richer return types.</p></blockquote>


<p>This roughly means that we can specify a custom signature for the data constructors, and therefore we can also specify the necessary type constraints.</p>

<p>How can we do that? Take a look at the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="kr">where</span>
</span><span class='line'>      <span class="kt">RootElement</span>       <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">valueType</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span>
</span><span class='line'>      <span class="kt">ElementWithParent</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">valueType</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span> <span class="ow">-&gt;</span> <span class="kt">UnionFindElement</span> <span class="n">valueType</span>
</span><span class='line'><span class="kr">deriving</span> <span class="kr">instance</span> <span class="kt">Eq</span> <span class="p">(</span><span class="kt">UnionFindElement</span> <span class="n">valueType</span><span class="p">)</span>
</span><span class='line'><span class="kr">deriving</span> <span class="kr">instance</span> <span class="kt">Show</span> <span class="n">valueType</span> <span class="ow">=&gt;</span> <span class="kt">Show</span> <span class="p">(</span><span class="kt">UnionFindElement</span> <span class="n">valueType</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As already anticipated, with this new syntax we are allowed to specify the constructor signature. Therefore we are putting the <code>Eq</code> constraint on <code>valueType</code>. After that we want to make our new data type an instance of <code>Eq</code> and <code>Show</code>, but it turns out that we cannot use the &#8216;normal&#8217; syntax for deriving, since the instance declaration would have a non-standard context. Fortunately Haskell comes with a mechanisms called <strong>stand-alone deriving declaration</strong> which allows us to specify the instance derivation separately from the data type definition (if you want to know more about it, <a href="http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/deriving.html">the doc</a> is there waiting for you).</p>

<p>The last thing I need to tell you is that the two cool features that we just discussed, GADTs and stand-alone deriving, both need a compiler flag in order to be enabled, respectively <code>-XGADTs</code> and <code>-XStandaloneDeriving</code>. Just add them to your build command and you&#8217;re all set.
If you use Sublime Text 2, you can change your <code>cmd</code> parameter in <code>Haskell.sublime-build</code> to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"cmd": ["runhaskell", "-XGADTs", "-XStandaloneDeriving", "$file"]</span></code></pre></td></tr></table></div></figure>


<p>So we made it! We can now write any signature using our newly defined <code>UnionFindElement</code> and the compiler will know that its type parameter will be an instance of <code>Eq</code>, allowing us to perform (dis)equality operations on it!</p>

<p>It&#8217;s all for today,
stay tuned for more pills!</p>

<p><strong>UPDATE</strong></p>

<p>As Jason pointed out in the comments you can use a pragma instead of adding compiler flags. In this way you can enable this features in a more flexible way only when you need them. Just add this pragma at the top of your source file and you&#8217;re done</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE GADTs, StandaloneDeriving #-}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>UPDATE 2</strong></p>

<p>As Sjoerd suggested in the comments it is not strictly necessary to put the <code>Show</code> constraint in the constructors signature. We can safely remove it provided that we change the standalone deriving from</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">deriving</span> <span class="kr">instance</span> <span class="kt">Show</span> <span class="p">(</span><span class="kt">UnionFindElement</span> <span class="n">valueType</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">deriving</span> <span class="kr">instance</span> <span class="kt">Show</span> <span class="n">valueType</span> <span class="ow">=&gt;</span> <span class="kt">Show</span> <span class="p">(</span><span class="kt">UnionFindElement</span> <span class="n">valueType</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In such way the compiler will know that it can inherit the <code>Show</code> instance of <code>valueType</code> and use it to display our <code>UnionFindElement</code> whenever needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The root of all Tex]]></title>
    <link href="http://codepills.net/blog/2012/12/07/the-root-of-all-tex/"/>
    <updated>2012-12-07T13:14:00+01:00</updated>
    <id>http://codepills.net/blog/2012/12/07/the-root-of-all-tex</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>Recently <a href="http://codepills.net/blog/2012/12/06/latex-is-now-sublime/">we talked about</a> how to set-up a delightful working environment for LaTeX using Sublime Text 2.</p>

<p>Today I want to share with you a trick that will help you while dealing with multi-part LaTeX documents using the <code>\input</code> or the <code>\include</code> commands.</p>

<!-- more -->


<h1>The scenario</h1>

<p>Suppose you&#8217;re working on a large and structured LaTeX document, maybe a paper for an upcoming conference, maybe a thesis or similar stuff.
Being a tidy person you correctly decided to split your document in several parts, each one in a separate <code>.tex</code> file.
So you end up having a <code>main.tex</code> document that looks like this</p>

<div><script src='https://gist.github.com/4235760.js'></script>
<noscript><pre><code>\documentclass{article}

\title{A long document}
\author{Gabriele Petronella}
\date{\today}

\begin{document}

\maketitle

\input{abstract.tex}
\input{related-work.tex}
\input{experiment.tex}
\input{results.tex}
\input{conclusions.tex}

\end{document}</code></pre></noscript></div>


<p>(<strong>note</strong>: I used the <code>\input</code> command in the above example. There&#8217;s a difference between <code>\input</code> and <code>\include</code> which is well explained <a href="http://tex.stackexchange.com/questions/246/when-should-i-use-input-vs-include">here</a>).</p>

<h1>The problem</h1>

<p>The structure looks great but let&#8217;s take a look at the annoying problem we have here.</p>

<p>Suppose you&#8217;re working on the <code>abstract.tex</code> file and you want to compile it to see how the document looks like. As we learned in the previous pill we press <code>Cmd+B</code> (or <code>Ctrl+B</code> on Windows and Linux) in our beautiful Sublime Text editor and we are done, right?</p>

<p>Unfortunately that&#8217;s not the case and we&#8217;ll get an error looking more or less like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./abstract.tex:2: LaTeX Error: Missing \begin{document}.</span></code></pre></td></tr></table></div></figure>


<p>The LaTeX compiler cannot figure out by itself that the current document is included in another one (in our case <code>main.tex</code>) so it complains about the missing <code>\begin{document}</code> command.
If you want to compile your document you should go back to the <code>main.tex</code> file and do it from there.</p>

<p>Kind of annoying, isn&#8217;t it?</p>

<h1>The solution</h1>

<p>It turns out that there&#8217;s a very simple and elegant way to help the compiler to figure out that a file is a part of a larger document.</p>

<p>Simply add this line at the top of <code>abstract.tex</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% !TEX root = main.tex</span></code></pre></td></tr></table></div></figure>


<p>This will tell the compiler that the root of our document is called <code>main.tex</code> and it will compile that one even when we are running the command while working on <code>abstract.tex</code>.</p>

<p>Productivity for the win!</p>

<p>Stay tuned for more pills</p>

<p>Bye</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX is now Sublime]]></title>
    <link href="http://codepills.net/blog/2012/12/06/latex-is-now-sublime/"/>
    <updated>2012-12-06T22:53:00+01:00</updated>
    <id>http://codepills.net/blog/2012/12/06/latex-is-now-sublime</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>I can safely guess that many of you use or have used LaTeX, the beautiful markup language by Leslie Lamport.</p>

<p>If you don&#8217;t and you have some aesthetic taste I suggest you to <a href="http://en.wikibooks.org/wiki/LaTeX/Introduction">check it out</a> and stop producing ugly Word documents.
If instead you know what I&#8217;m talking about, I&#8217;d like to share with you all my LaTeX configuration, which makes use of the awesome editor <strong>Sublime Text 2</strong> and its plug-in <strong>LaTeXTools</strong>.</p>

<!-- more -->


<p><strong>Disclaimer</strong>: the following article refers to an <strong>OSX</strong> implementation. The information provided usually applies to Windows and Linux systems too, even if minor discrepancies may occur, such as for the LaTeX bundle and the Sublime Text shortcuts.</p>

<h1>Tools Setup</h1>

<h2>LaTeX</h2>

<p>Installing LaTeX on OSX is pretty straighforward: all it takes is to visit the <a href="http://www.tug.org/mactex/">MacTeX project page</a> and download the installer.
The installation comes with a extensive collection of LaTeX packages along with many useful tools, such as TeXLive, a package manager, and BibDesk, a BibTeX guy.</p>

<h2>Sublime Text 2</h2>

<p><a href="http://www.sublimetext.com/">Sublime Text</a> is an amazing editor. Period.</p>

<p>I won&#8217;t go through the several reasons why I love using it, since it would be beyond the scope of this post, but if you are interested you can check out articles such <a href="http://1p1e1.tumblr.com/post/14262857223/9-reasons-you-must-install-sublime-text-2-code-like-a">this one</a> or <a href="http://steverandytantra.com/thoughts/three-months-with-sublime-text-2">this other one</a> which are perfectly aligned with my opinion.</p>

<p>The first step is the install this cool editor (which comes with a free unlimited evaluation period, meaning that you&#8217;ll have to discard an alert every once in a while), a trivial task that can be accomplished <a href="http://www.sublimetext.com/2">downloading the provided installer</a>.</p>

<h2>Sublime Package Control</h2>

<p>One of the coolest feature of Sublime Text is its package manager, which has to be installed separately by executing the following command into the Sublime Text shell, accessible by the shortcut <code>CTRL+`</code>.</p>

<figure class='code'><figcaption><span>Sublime Package Control install script</span><a href='http://wbond.net/sublime_packages/package_control/installation'>source </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'</span></code></pre></td></tr></table></div></figure>


<h2>LaTeXTools</h2>

<p>Now that we have the package manager installed it is now incredibly easy to extend the Sublime Text functionalities in a matter of seconds.</p>

<p><img class="alignright" src="http://f.cl.ly/items/3m0v2y44122D2M300k0v/install-package.png" width="600"></p>

<p>Just open the command palette (<em>Tools -> Command Palette&#8230;</em> or <code>Cmd+Shift+P</code>) and select <em>Package Control: Install Package</em> (tip: start typing the name of the command and the results will be filtered in real time). Press enter, wait a few seconds for the package list to load, select LaTeXTools then press enter.
Wait for the installation to complete (status messages will appear at the bottom of the Sublime Text window) and there you go, quick and easy.</p>

<h2>Skim</h2>

<p><a href="http://skim-app.sourceforge.net/">Skim</a> is a nice PDF viewer for OSX. I&#8217;ve never had nothing to complain about using the default Preview viewer, but Skim is definitely more advance and one of its feature will come in handy for our purposes.</p>

<p>On OSX the LaTeXTools plug-in will by default for a Skim installation, therefore we just need to install it with the installer provided on its <a href="http://skim-app.sourceforge.net/">website</a> and that&#8217;s all there is to it.</p>

<h1>Usage and Features</h1>

<p>Great! In a few minutes and without any particular effort we have a nice and productive LaTeX environment. Let&#8217;s give it a test drive.</p>

<h2>Our first document</h2>

<p>Let&#8217;s create a new LaTeX document called <code>sublime.tex</code>.</p>

<div><script src='https://gist.github.com/4186089.js'></script>
<noscript><pre><code>\documentclass{article}

\title{LaTeX is now Sublime}
\author{Gabriele Petronella}

\begin{document}

\maketitle

\section{My first section}
LaTeXTools is definitely a great plug-in!

\end{document}</code></pre></noscript></div>


<p>Now let&#8217;s compile it using the shortcut <code>Cmd+B</code> (or by selecting <em>Tools -> Build</em>)</p>

<p>If everything went as expected, you will obtain a PDF document that will be automatically opened with Skim.</p>

<p><img src="http://f.cl.ly/items/3H3P3L2L2h3P35412d2f/sublime-latex.png"></p>

<h2>Forward and backward search</h2>

<p>That was nice and easy, but I&#8217;d like to go a little more further and show you something slightly more advanced.</p>

<p>If you&#8217;ve ever used a LaTeX-specific editor one of the feature that you have probably loved was the possibility of jumping to the PDF from the source and the other way around from the PDF to the LaTeX source.</p>

<p>You may think (and many people I know actually did) that kind of auto-magic feature must be necessarily included in a custom IDE and that Sublime Text is a too generic editor for handling such a specific feature.
Well, it turns out that you are wrong, my friend. Let&#8217;s configure our editor in order to achieve such a cool behavior!</p>

<h3>Forward</h3>

<p>So you want to jump to the PDF from your LaTeX code? You&#8217;re lucky, since LaTeXTools already did the work for you (according you&#8217;re using Skim as a viewer, of course).
Simply use the shortcut <code>Cmd+L-J</code> (which means press <code>Cmd+L</code>, release it and then press <code>J</code>) and you&#8217;ll jump to the PDF at the same row where your cursor is in the source file.</p>

<p>If you pay attention you&#8217;ll also notice that this is automatically done whenever you compile the document with <code>Cmd+B</code>, a feature that can be disabled in case it annoys you.</p>

<h3>Backward</h3>

<p>Jumping to the PDF is great, but suppose you are reading the PDF and you find a typo. Wouldn&#8217;t be nice to jump back to the source in order to modify it on the flight?</p>

<p>Here is where Skim reveals its power: all you need is to inform it that you&#8217;re using Sublime Text as editor and tell it how to communicate with it.</p>

<p>Open the Skim preferences and select the <em>Sync tab</em>.
Be sure that the <em>Check for file changes</em> is unchecked, select <em>Custom</em> as Preset and paste the following path as Command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl </span></code></pre></td></tr></table></div></figure>


<p>and this parameters as Arguments:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"%file":%line</span></code></pre></td></tr></table></div></figure>


<p><img src="http://f.cl.ly/items/2O1R3Y1c392j0l3U3b0e/skim-pref.png" width="500"></p>

<p>And there we go, now we can simply press <code>Cmd+Shift+Click</code> on the PDF file in order to jump back to the LaTeX source. Very convenient indeed!</p>

<h1>Conclusions</h1>

<p>Sublime Text 2 is a great LaTeX companion, thanks to the great plug-in LaTeXTools and after a few hours playing with it I think most of you will agree with me.</p>

<p>I encourage you to explore all the feature that the plug-in has to offer, especially the very convenient shortcuts that will definitely increase your productivity. A couple of examples: <code>Cmd+L+E</code> will surround the selection into a <code>emph</code> tag whereas <code>Cmd+L-C</code> will start a tag named as the word preceding the cursors. Many other useful information can be found on the <a href="https://github.com/SublimeText/LaTeXTools">github repo</a> of the plug-in.</p>

<p>Now go and be productive!</p>

<p>Stay tuned for more pills</p>

<p>Bye</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://codepills.net/blog/2012/11/21/hello-world/"/>
    <updated>2012-11-21T17:15:00+01:00</updated>
    <id>http://codepills.net/blog/2012/11/21/hello-world</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='This blog is meant as a resource where to find solutions to real life problems, mostly related to the programming world.'></p>

<p>First post on this blog, I don&#8217;t even know if anybody will read this at all. Anyway, who cares! This blog is meant as a resource where to find solutions to real life problems, mostly related to the programming world. (yeah, exactly, like thousands of other blogs out there! One more shouldn&#8217;t harm too much, after all&#8230;)
Before going on I&#8217;ve to warn you reader: this <strong>is</strong> a geek-nerd-whatever blog, so if you are reading this and you don&#8217;t even know what a programming language is &#8211; why the heck are you here in the first place?! &#8211; I apologize but I have to suggest to spend your spare time somewhere else: <a href="http://youtube.com">youtube.com</a>, <a href="http://facebook.com">facebook.com</a>, <a href="http://youporn.com">youporn.com</a> are good candidates).</p>

<!-- more -->


<p>Back on topic, this blog will contain reports of personal experiences in the programming world, along with the solution found (hopefully!).
The main purpose is to save hours of time to those who might encounter the same issue and make the world a better place (God, I should apply for Miss America!), or at least a more efficient.</p>

<p>Since I really enjoyed setting up this blog itself, I&#8217;ll probably start with a brief guide on how to achieve it.</p>

<p>For those who are still here reading, stay tuned! For the others, well, I&#8217;ve clearly nothing to tell you.</p>

<p>G.
</span></p>
]]></content>
  </entry>
  
</feed>
